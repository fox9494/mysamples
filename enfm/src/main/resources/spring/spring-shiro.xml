<?xml version="1.0" encoding="UTF-8"?>
<!--
    Repository and Service layers
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
		
		
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <property name="loginUrl" value="/WEB-INF/jsp/login.jsp"/>
	    <property name="successUrl" value="/WEB-INF/jsp/frame/index.jsp"/>
	    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> 
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </property> -->
	    <property name="filterChainDefinitions">
	        <value>
	            /admin/** = authc, roles[admin]
	            /docs/** = authc, perms[document:read]
	            /** = authc
	        </value>
	    </property>
	</bean>    
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
	    <property name="realm" ref="myRealm"/>
	    <!-- By default the servlet container sessions will be used.  Uncomment this line
	         to use shiro's native sessions (see the JavaDoc for more): -->
	    <!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<bean id="myRealm" class="..." />
  
   
 

  
</beans>